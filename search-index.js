var searchIndex = JSON.parse('{\
"vcf2parquet":{"doc":"vcf2parquet allow user to convert a vcf in parquet format.","t":"AAAAFFNENNNNGLLLLLLLLLLLLLLLLNENNNNNNDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLF","n":["error","name2data","record2chunk","schema","vcf2multiparquet","vcf2parquet","Arrow","Error","Io","NoConversion","NoodlesHeader","Parquet","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","into","provide","source","to_string","try_from","try_into","type_id","Bool","ColumnData","Float","Int","ListBool","ListFloat","ListInt","ListString","Name2Data","String","add_record","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","get","get_mut","into","into","into_arc","into_arc","new","push_bool","push_f32","push_i32","push_null","push_string","push_vecbool","push_vecf32","push_veci32","push_vecstring","try_from","try_from","try_into","try_into","type_id","type_id","Record2Chunk","borrow","borrow_mut","encodings","from","into","into_iter","new","next","try_from","try_into","type_id","from_header"],"q":[[0,"vcf2parquet"],[6,"vcf2parquet::error"],[29,"vcf2parquet::name2data"],[70,"vcf2parquet::record2chunk"],[82,"vcf2parquet::schema"]],"d":["vcf2parquet error","Struct to link name and data","Convert vcf record iterator into Parquet chunk","Construct parquet schema corresponding to vcf","Read <code>input</code> vcf and write each row group in a parquet file …","Read <code>input</code> vcf and write parquet in <code>output</code>","Arrow error","","Io error","Not support type conversion","Noodles header vcf error","Parquet error","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Alias of std::collections::HashMap that associate a column …","","Add a vcf record in std::collections::HashMap struct","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Just a wrapper arround std::collections::HashMap::get","Just a wrapper arround std::collections::HashMap::get_mut","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert Name2Data in vector of arrow2 array","Convert ColumnData in Arrow2 array","Create a new Name2Data, vcf header is required to add info …","Add a boolean value in array, if it’s not a boolean …","Add a f32 value in array, if it’s not a float array …","Add a i32 value in array, if it’s not a integer array …","Add a Null value in array","Add a string value in array, if it’s not a string array …","Add a vector of bool value in array, if it’s not a …","Add a vector of float value in array, if it’s not a …","Add a vector of integer value in array, if it’s not a …","Add a vector of string value in array, if it’s not a …","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Generate a parquet schema corresponding to vcf header"],"i":[0,0,0,0,0,0,6,0,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,23,0,23,23,23,23,23,23,0,23,20,20,23,20,23,20,23,20,23,20,20,20,23,20,23,20,23,23,23,23,23,23,23,23,23,20,23,20,23,20,23,0,32,32,32,32,32,32,32,32,32,32,32,0],"f":[0,0,0,0,[[1,2,3,4,5],[[7,[6]]]],[[1,8,3,4,5],[[7,[6]]]],0,0,0,0,0,0,0,[[]],[[]],[[6,9],[[7,[10]]]],[[6,9],[[7,[10]]]],[11,6],[12,6],[13,6],[14,6],[[]],[[]],[15],[6,[[17,[16]]]],[[],18],[[],7],[[],7],[[],19],0,0,0,0,0,0,0,0,0,0,[[20,21,22],[[7,[11]]]],[[]],[[]],[[]],[[]],[[20,9],[[7,[10]]]],[[23,9],[[7,[10]]]],[[]],[[]],[[20,2],[[17,[23]]]],[[20,2],[[17,[23]]]],[[]],[[]],[[20,24],[[28,[[26,[25]],27]]]],[23,[[26,[25]]]],[[3,22],20],[[23,[17,[5]]]],[[23,[17,[29]]]],[[23,[17,[30]]]],[23],[[23,18]],[[23,[28,[[17,[5]],27]]],[[7,[11]]]],[[23,[28,[[17,[29]],27]]],[[7,[11]]]],[[23,[28,[[17,[30]],27]]],[[7,[11]]]],[[23,[28,[[17,[18]],27]]],[[7,[11]]]],[[],7],[[],7],[[],7],[[],7],[[],19],[[],19],0,[[]],[[]],[[[32,[31]]],[[28,[[28,[33,27]],27]]]],[[]],[[]],[[]],[[31,3,22,24],[[32,[31]]]],[[[32,[31]]],17],[[],7],[[],7],[[],19],[[22,5],[[7,[24,6]]]]],"c":[],"p":[[8,"BufRead"],[15,"str"],[15,"usize"],[4,"CompressionOptions"],[15,"bool"],[4,"Error"],[4,"Result"],[8,"Write"],[3,"Formatter"],[3,"Error"],[4,"Error"],[4,"ParseError"],[3,"Error"],[4,"Error"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[3,"TypeId"],[3,"Name2Data"],[3,"Record"],[3,"Header"],[4,"ColumnData"],[3,"Schema"],[8,"Array"],[3,"Arc"],[3,"Global"],[3,"Vec"],[15,"f32"],[15,"i32"],[8,"Iterator"],[3,"Record2Chunk"],[4,"Encoding"]]},\
"vcf2parquet_bin":{"doc":"vcf2parquet bin","t":"AAFNDEDNNNNNDNENNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNNGLLLLLLLLLFLLLLLLMMM","n":["cli","error","main","Brotli","Command","Compression","Convert","Convert","Gzip","Lz4","Lzo","Snappy","Split","Split","SubCommand","Uncompressed","Zstd","__clone_box","__clone_box","__clone_box","__clone_box","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","batch_size","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","command","command","command","command","command_for_update","command_for_update","command_for_update","command_for_update","compression","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","group_id","has_subcommand","info_optional","input","into","into","into","into","into","output","read_buffer","subcommand","to_owned","to_owned","to_owned","to_owned","to_possible_value","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","value_variants","Error","Io","Lib","Niffler","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","mapping","provide","source","to_string","try_from","try_into","type_id","error","error","error"],"q":[[0,"vcf2parquet_bin"],[3,"vcf2parquet_bin::cli"],[119,"vcf2parquet_bin::error"],[140,"vcf2parquet_bin::error::Error"]],"d":["cli of vcf2parquet-bin","error of vcf2parquet-bin","","","","","Convert a vcf in a parquet","","","","","","Convert a vcf in multiple parquet file each file contains …","","","","","","","","","","","","","","","","","Get batch_size set by user or default value","","","","","","","","","","","","","","","","","","","","","","","","","","","Get compression set by user or default value","","","","","","Get output format","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Get info optional","Get input","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get output","Get read buffer size","Get subcommand","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Io error","vcf2parquet-lib error","Niffler error","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,6,0,0,0,7,6,6,6,6,0,7,0,6,6,6,7,8,9,4,8,9,4,8,9,7,7,4,6,4,7,8,9,6,4,7,8,9,6,7,8,9,6,7,8,9,4,7,8,9,4,7,8,9,4,6,4,7,8,9,9,6,4,7,8,9,4,7,8,9,4,7,8,9,4,8,9,7,4,4,6,4,7,8,9,8,4,4,6,7,8,9,6,6,4,7,8,9,6,4,7,8,9,6,4,7,8,9,4,7,8,9,4,7,8,9,6,0,24,24,24,0,24,24,24,24,24,24,24,24,24,0,24,24,24,24,24,24,32,33,34],"f":[0,0,[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[2],[2],[2],[2],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[4,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,6],[7,7],[8,8],[9,9],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[4,10],[[6,11],12],[[4,11],12],[[7,11],12],[[8,11],12],[[9,11],12],[9,13],[[]],[[]],[[]],[[]],[[]],[14,[[16,[4,15]]]],[14,[[16,[7,15]]]],[14,[[16,[8,15]]]],[14,[[16,[9,15]]]],[14,[[16,[4,15]]]],[14,[[16,[7,15]]]],[14,[[16,[8,15]]]],[14,[[16,[9,15]]]],[[],[[18,[17]]]],[[],[[18,[17]]]],[[],[[18,[17]]]],[13,19],[4,19],[4,20],[[]],[[]],[[]],[[]],[[]],[8,20],[4,5],[4,7],[[]],[[]],[[]],[[]],[6,[[18,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[],22],[[],22],[[],22],[[4,14],[[16,[15]]]],[[7,14],[[16,[15]]]],[[8,14],[[16,[15]]]],[[9,14],[[16,[15]]]],[[4,14],[[16,[15]]]],[[7,14],[[16,[15]]]],[[8,14],[[16,[15]]]],[[9,14],[[16,[15]]]],[[],[[23,[6]]]],0,0,0,0,0,[[]],[[]],[[24,11],12],[[24,11],12],[25,24],[26,24],[[]],[27,24],[[]],[[[28,[24]]],24],[29],[24,[[18,[30]]]],[[],31],[[],16],[[],16],[[],22],0,0,0],"c":[],"p":[[6,"Result"],[3,"Private"],[3,"Command"],[3,"Command"],[15,"usize"],[4,"Compression"],[4,"SubCommand"],[3,"Convert"],[3,"Split"],[4,"CompressionOptions"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[15,"bool"],[3,"PathBuf"],[3,"PossibleValue"],[3,"TypeId"],[15,"slice"],[4,"Error"],[4,"Error"],[3,"Error"],[4,"Error"],[8,"Into"],[3,"Demand"],[8,"Error"],[3,"String"],[13,"Io"],[13,"Niffler"],[13,"Lib"]]},\
"vcf2parquet_lib":{"doc":"vcf2parquet library","t":"AAAAFFNENNNNGLLLLLLLLLLLLLLLLNENNNNNNDNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLF","n":["error","name2data","record2chunk","schema","vcf2multiparquet","vcf2parquet","Arrow","Error","Io","NoConversion","NoodlesHeader","Parquet","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","into","provide","source","to_string","try_from","try_into","type_id","Bool","ColumnData","Float","Int","ListBool","ListFloat","ListInt","ListString","Name2Data","String","add_record","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","get","get_mut","into","into","into_arc","into_arc","new","push_bool","push_f32","push_i32","push_null","push_string","push_vecbool","push_vecf32","push_veci32","push_vecstring","try_from","try_from","try_into","try_into","type_id","type_id","Record2Chunk","borrow","borrow_mut","encodings","from","into","into_iter","new","next","try_from","try_into","type_id","from_header"],"q":[[0,"vcf2parquet_lib"],[6,"vcf2parquet_lib::error"],[29,"vcf2parquet_lib::name2data"],[70,"vcf2parquet_lib::record2chunk"],[82,"vcf2parquet_lib::schema"]],"d":["vcf2parquet error","Struct to link name and data","Convert vcf record iterator into Parquet chunk","Construct parquet schema corresponding to vcf","Read <code>input</code> vcf and write each row group in a parquet file …","Read <code>input</code> vcf and write parquet in <code>output</code>","Arrow error","","Io error","Not support type conversion","Noodles header vcf error","Parquet error","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Alias of std::collections::HashMap that associate a column …","","Add a vcf record in std::collections::HashMap struct","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Just a wrapper arround std::collections::HashMap::get","Just a wrapper arround std::collections::HashMap::get_mut","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert Name2Data in vector of arrow2 array","Convert ColumnData in Arrow2 array","Create a new Name2Data, vcf header is required to add info …","Add a boolean value in array, if it’s not a boolean …","Add a f32 value in array, if it’s not a float array …","Add a i32 value in array, if it’s not a integer array …","Add a Null value in array","Add a string value in array, if it’s not a string array …","Add a vector of bool value in array, if it’s not a …","Add a vector of float value in array, if it’s not a …","Add a vector of integer value in array, if it’s not a …","Add a vector of string value in array, if it’s not a …","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Generate a parquet schema corresponding to vcf header"],"i":[0,0,0,0,0,0,8,0,8,8,8,8,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,24,0,24,24,24,24,24,24,0,24,21,21,24,21,24,21,24,21,24,21,21,21,24,21,24,21,24,24,24,24,24,24,24,24,24,21,24,21,24,21,24,0,33,33,33,33,33,33,33,33,33,33,33,0],"f":[0,0,0,0,[[1,2,3,4,5],6],[[1,7,3,4,5],6],0,0,0,0,0,0,0,[[]],[[]],[[8,9],10],[[8,9],10],[11,8],[12,8],[13,8],[14,8],[[]],[[]],[15],[8,[[17,[16]]]],[[],18],[[],19],[[],19],[[],20],0,0,0,0,0,0,0,0,0,0,[[21,22,23],[[19,[14]]]],[[]],[[]],[[]],[[]],[[21,9],10],[[24,9],10],[[]],[[]],[[21,2],[[17,[24]]]],[[21,2],[[17,[24]]]],[[]],[[]],[[21,25],[[28,[[27,[26]]]]]],[24,[[27,[26]]]],[[3,23],21],[[24,[17,[5]]]],[[24,[17,[29]]]],[[24,[17,[30]]]],[24],[[24,18]],[[24,[28,[[17,[5]]]]],31],[[24,[28,[[17,[29]]]]],31],[[24,[28,[[17,[30]]]]],31],[[24,[28,[[17,[18]]]]],31],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],0,[[]],[[]],[[[33,[32]]],[[28,[[28,[34]]]]]],[[]],[[]],[[]],[[32,3,23,25],[[33,[32]]]],[[[33,[32]]],17],[[],19],[[],19],[[],20],[[23,5],[[6,[25]]]]],"c":[],"p":[[8,"BufRead"],[15,"str"],[15,"usize"],[4,"CompressionOptions"],[15,"bool"],[6,"Result"],[8,"Write"],[4,"Error"],[3,"Formatter"],[6,"Result"],[4,"ParseError"],[4,"Error"],[3,"Error"],[4,"Error"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Name2Data"],[3,"Record"],[3,"Header"],[4,"ColumnData"],[3,"Schema"],[8,"Array"],[3,"Arc"],[3,"Vec"],[15,"f32"],[15,"i32"],[6,"Result"],[8,"Iterator"],[3,"Record2Chunk"],[4,"Encoding"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
