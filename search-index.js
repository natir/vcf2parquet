var searchIndex = JSON.parse('{\
"vcf2parquet":{"doc":"vcf2parquet allow user to convert a vcf in parquet format.","t":[0,0,5,0,0,13,4,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,12,12,12,13,4,13,13,13,13,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,5],"n":["error","name2data","noodles2arrow","record2chunk","schema","ArrowError","Error","IoError","NoConversion","NoodlesHeaderError","ParquetError","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","into","mapping","source","to_string","try_from","try_into","type_id","error","error","error","error","Bool","ColumnData","Float","Int","ListBool","ListFloat","ListInt","ListString","Name2Data","String","add_record","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","get","get_mut","into","into","into_arc","into_arc","new","push_bool","push_f32","push_i32","push_null","push_string","push_vecbool","push_vecf32","push_veci32","push_vecstring","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","Record2Chunk","borrow","borrow_mut","encodings","from","into","into_iter","new","next","try_from","try_into","type_id","from_header"],"q":["vcf2parquet","","","","","vcf2parquet::error","","","","","","","","","","","","","","","","","","","","","","","vcf2parquet::error::Error","","","","vcf2parquet::name2data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","vcf2parquet::name2data::ColumnData","","","","","","","","vcf2parquet::record2chunk","","","","","","","","","","","","vcf2parquet::schema"],"d":["vcf2parquet error","Struct to link name and data","Read <code>input</code> vcf and write parquet in <code>output</code>","Convert vcf record iterator into Parquet chunk","Construct parquet schema corresponding to vcf","Arrow error","","Io error","Not support type conversion","Noodles header vcf error","Parquet error","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Generate a parquet schema corresponding to vcf header"],"i":[0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,2,3,4,5,6,0,6,6,6,6,6,6,0,6,7,7,6,7,6,7,6,7,6,7,7,7,6,7,6,7,6,6,6,6,6,6,6,6,6,7,6,7,6,7,6,8,9,10,11,12,13,14,15,0,16,16,16,16,16,16,16,16,16,16,16,0],"f":[null,null,[[["",0],["",0],["usize",0],["compressionoptions",4]],["result",4,[["error",4]]]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[["arrowerror",4]],["error",4]],[[["error",4]],["error",4]],[[["error",3]],["error",4]],[[["parseerror",4]],["error",4]],[[]],[[],["error",4]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["record",3],["header",3]],["result",4,[["arrowerror",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[["",0],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[["",0],["str",0]],["option",4,[["columndata",4]]]],[[["",0],["str",0]],["option",4,[["columndata",4]]]],[[]],[[]],[[["schema",3]],["vec",3,[["arc",3,[["array",8]]],["global",3]]]],[[],["arc",3,[["array",8]]]],[[["usize",0],["header",3]],["name2data",3]],[[["",0],["option",4,[["bool",0]]]]],[[["",0],["option",4,[["f32",0]]]]],[[["",0],["option",4,[["i32",0]]]]],[[["",0]]],[[["",0],["string",3]]],[[["",0],["vec",3,[["option",4,[["bool",0]]],["global",3]]]],["result",4,[["arrowerror",4]]]],[[["",0],["vec",3,[["option",4,[["f32",0]]],["global",3]]]],["result",4,[["arrowerror",4]]]],[[["",0],["vec",3,[["option",4,[["i32",0]]],["global",3]]]],["result",4,[["arrowerror",4]]]],[[["",0],["vec",3,[["option",4,[["string",3]]],["global",3]]]],["result",4,[["arrowerror",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vec",3,[["encoding",4],["global",3]]]],[[]],[[]],[[]],[[["records",3],["usize",0],["header",3],["schema",3]],["record2chunk",3]],[[["",0]],["option",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["header",3]],["result",4,[["schema",3],["error",4]]]]],"p":[[4,"Error"],[13,"ArrowError"],[13,"ParquetError"],[13,"IoError"],[13,"NoodlesHeaderError"],[4,"ColumnData"],[3,"Name2Data"],[13,"Bool"],[13,"Int"],[13,"Float"],[13,"String"],[13,"ListBool"],[13,"ListInt"],[13,"ListFloat"],[13,"ListString"],[3,"Record2Chunk"]]},\
"vcf2parquet_bin":{"doc":"vcf2parquet bin","t":[0,0,5,13,3,4,13,13,13,13,13,11,11,11,12,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,4,13,13,13,6,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,12,12],"n":["cli","error","main","Brotli","Command","Compression","Gzip","Lz4","Lzo","Snappy","Uncompressed","augment_args","augment_args_for_update","batch_size","batch_size","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","compression","compression","fmt","fmt","from","from","from_arg_matches","input","input","into","into","into_app","into_app_for_update","output","output","to_owned","to_possible_value","try_from","try_from","try_into","try_into","type_id","type_id","update_from_arg_matches","value_variants","Error","IoError","LibError","NifflerError","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","mapping","source","to_string","try_from","try_into","type_id","error","error","error"],"q":["vcf2parquet_bin","","","vcf2parquet_bin::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","vcf2parquet_bin::error","","","","","","","","","","","","","","","","","","","","vcf2parquet_bin::error::Error","",""],"d":["cli of vcf2parquet-bin","error of vcf2parquet-bin","","","","","","","","","","","","","Batch size (default 100,000)","","","","","","","","Compression method (default snappy)","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Input path","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Output path","","","","","","","","","","","","Io error","vcf2parquet-lib error","Niffler error","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,1,0,0,1,1,1,1,1,2,2,2,2,1,2,1,2,1,1,2,2,1,2,1,2,2,2,2,1,2,2,2,2,2,1,1,1,2,1,2,1,2,2,1,0,3,3,3,0,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,4,5,6],"f":[null,null,[[],["result",4,[["error",4]]]],null,null,null,null,null,null,null,null,[[["command",6]],["command",6]],[[["command",6]],["command",6]],[[["",0]],["usize",0]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["compression",4]],[[["",0],["",0]]],[[["",0]],["compressionoptions",4]],null,[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["argmatches",3]],["result",4,[["error",3]]]],[[["",0]],["pathbuf",3]],null,[[]],[[]],[[],["command",6]],[[],["command",6]],[[["",0]],["pathbuf",3]],null,[[["",0]]],[[["",0]],["option",4,[["possiblevalue",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0],["argmatches",3]],["result",4,[["error",3]]]],[[]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["error",4]]],[[["error",4]]],[[]],[[["error",3]]],[[]],[[],["error",4]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null],"p":[[4,"Compression"],[3,"Command"],[4,"Error"],[13,"IoError"],[13,"NifflerError"],[13,"LibError"]]},\
"vcf2parquet_lib":{"doc":"vcf2parquet library","t":[0,0,5,0,0,13,4,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,12,12,12,12,13,4,13,13,13,13,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,5],"n":["error","name2data","noodles2arrow","record2chunk","schema","ArrowError","Error","IoError","NoConversion","NoodlesHeaderError","ParquetError","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","into","mapping","source","to_string","try_from","try_into","type_id","error","error","error","error","Bool","ColumnData","Float","Int","ListBool","ListFloat","ListInt","ListString","Name2Data","String","add_record","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","get","get_mut","into","into","into_arc","into_arc","new","push_bool","push_f32","push_i32","push_null","push_string","push_vecbool","push_vecf32","push_veci32","push_vecstring","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","Record2Chunk","borrow","borrow_mut","encodings","from","into","into_iter","new","next","try_from","try_into","type_id","from_header"],"q":["vcf2parquet_lib","","","","","vcf2parquet_lib::error","","","","","","","","","","","","","","","","","","","","","","","vcf2parquet_lib::error::Error","","","","vcf2parquet_lib::name2data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","vcf2parquet_lib::name2data::ColumnData","","","","","","","","vcf2parquet_lib::record2chunk","","","","","","","","","","","","vcf2parquet_lib::schema"],"d":["vcf2parquet error","Struct to link name and data","Read <code>input</code> vcf and write parquet in <code>output</code>","Convert vcf record iterator into Parquet chunk","Construct parquet schema corresponding to vcf","Arrow error","","Io error","Not support type conversion","Noodles header vcf error","Parquet error","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Generate a parquet schema corresponding to vcf header"],"i":[0,0,0,0,0,1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,2,3,4,5,6,0,6,6,6,6,6,6,0,6,7,7,6,7,6,7,6,7,6,7,7,7,6,7,6,7,6,6,6,6,6,6,6,6,6,7,6,7,6,7,6,8,9,10,11,12,13,14,15,0,16,16,16,16,16,16,16,16,16,16,16,0],"f":[null,null,[[["",0],["",0],["usize",0],["compressionoptions",4]],["result",6]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["error",3]]],[[["arrowerror",4]]],[[["parqueterror",4]]],[[["parseerror",4]]],[[]],[[],["error",4]],[[["",0]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["record",3],["header",3]],["result",4,[["arrowerror",4]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["str",0]],["option",4,[["columndata",4]]]],[[["",0],["str",0]],["option",4,[["columndata",4]]]],[[]],[[]],[[["schema",3]],["vec",3,[["arc",3,[["array",8]]]]]],[[],["arc",3,[["array",8]]]],[[["usize",0],["header",3]]],[[["",0],["option",4,[["bool",0]]]]],[[["",0],["option",4,[["f32",0]]]]],[[["",0],["option",4,[["i32",0]]]]],[[["",0]]],[[["",0],["string",3]]],[[["",0],["vec",3,[["option",4,[["bool",0]]]]]],["result",6]],[[["",0],["vec",3,[["option",4,[["f32",0]]]]]],["result",6]],[[["",0],["vec",3,[["option",4,[["i32",0]]]]]],["result",6]],[[["",0],["vec",3,[["option",4,[["string",3]]]]]],["result",6]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["vec",3,[["encoding",4]]]],[[]],[[]],[[]],[[["records",3],["usize",0],["header",3],["schema",3]]],[[["",0]],["option",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["header",3]],["result",6,[["schema",3]]]]],"p":[[4,"Error"],[13,"ArrowError"],[13,"ParquetError"],[13,"IoError"],[13,"NoodlesHeaderError"],[4,"ColumnData"],[3,"Name2Data"],[13,"Bool"],[13,"Int"],[13,"Float"],[13,"String"],[13,"ListBool"],[13,"ListInt"],[13,"ListFloat"],[13,"ListString"],[3,"Record2Chunk"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};