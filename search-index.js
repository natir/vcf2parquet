var searchIndex = JSON.parse('{\
"vcf2parquet":{"doc":"vcf2parquet allow user to convert a vcf in parquet format.","t":[0,0,0,0,5,5,13,4,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,13,13,13,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,5],"n":["error","name2data","record2chunk","schema","vcf2multiparquet","vcf2parquet","Arrow","Error","Io","NoConversion","NoodlesHeader","Parquet","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","into","provide","source","to_string","try_from","try_into","type_id","Bool","ColumnData","Float","Int","ListBool","ListFloat","ListInt","ListString","Name2Data","String","add_record","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","get","get_mut","into","into","into_arc","into_arc","new","push_bool","push_f32","push_i32","push_null","push_string","push_vecbool","push_vecf32","push_veci32","push_vecstring","try_from","try_from","try_into","try_into","type_id","type_id","Record2Chunk","borrow","borrow_mut","encodings","from","into","into_iter","new","next","try_from","try_into","type_id","from_header"],"q":["vcf2parquet","","","","","","vcf2parquet::error","","","","","","","","","","","","","","","","","","","","","","","vcf2parquet::name2data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","vcf2parquet::record2chunk","","","","","","","","","","","","vcf2parquet::schema"],"d":["vcf2parquet error","Struct to link name and data","Convert vcf record iterator into Parquet chunk","Construct parquet schema corresponding to vcf","Read <code>input</code> vcf and write each row group in a parquet file …","Read <code>input</code> vcf and write parquet in <code>output</code>","Arrow error","","Io error","Not support type conversion","Noodles header vcf error","Parquet error","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Alias of std::collections::HashMap that associate a column …","","Add a vcf record in std::collections::HashMap struct","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Just a wrapper arround std::collections::HashMap::get","Just a wrapper arround std::collections::HashMap::get_mut","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert Name2Data in vector of arrow2 array","Convert ColumnData in Arrow2 array","Create a new Name2Data, vcf header is required to add info …","Add a boolean value in array, if it’s not a boolean …","Add a f32 value in array, if it’s not a float array …","Add a i32 value in array, if it’s not a integer array …","Add a Null value in array","Add a string value in array, if it’s not a string array …","Add a vector of bool value in array, if it’s not a …","Add a vector of float value in array, if it’s not a …","Add a vector of integer value in array, if it’s not a …","Add a vector of string value in array, if it’s not a …","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Generate a parquet schema corresponding to vcf header"],"i":[0,0,0,0,0,0,5,0,5,5,5,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,21,0,21,21,21,21,21,21,0,21,18,18,21,18,21,18,21,18,21,18,18,18,21,18,21,18,21,21,21,21,21,21,21,21,21,18,21,18,21,18,21,0,29,29,29,29,29,29,29,29,29,29,29,0],"f":[0,0,0,0,[[1,2,3,4],[[6,[5]]]],[[2,3,4],[[6,[5]]]],0,0,0,0,0,0,0,[[]],[[]],[[5,7],[[6,[8]]]],[[5,7],[[6,[8]]]],[9,5],[10,5],[11,5],[[]],[12,5],[[]],[13],[5,[[15,[14]]]],[[],16],[[],6],[[],6],[[],17],0,0,0,0,0,0,0,0,0,0,[[18,19,20],[[6,[10]]]],[[]],[[]],[[]],[[]],[[18,7],[[6,[8]]]],[[21,7],[[6,[8]]]],[[]],[[]],[[18,1],[[15,[21]]]],[[18,1],[[15,[21]]]],[[]],[[]],[[18,22],[[26,[[24,[23]],25]]]],[21,[[24,[23]]]],[[2,20],18],[[21,[15,[4]]]],[[21,[15,[27]]]],[[21,[15,[28]]]],[21],[[21,16]],[[21,[26,[[15,[4]],25]]],[[6,[10]]]],[[21,[26,[[15,[27]],25]]],[[6,[10]]]],[[21,[26,[[15,[28]],25]]],[[6,[10]]]],[[21,[26,[[15,[16]],25]]],[[6,[10]]]],[[],6],[[],6],[[],6],[[],6],[[],17],[[],17],0,[[]],[[]],[29,[[26,[[26,[30,25]],25]]]],[[]],[[]],[[]],[[2,20,22],29],[29,15],[[],6],[[],6],[[],17],[[20,4],[[6,[22,5]]]]],"p":[[15,"str"],[15,"usize"],[4,"CompressionOptions"],[15,"bool"],[4,"Error"],[4,"Result"],[3,"Formatter"],[3,"Error"],[3,"Error"],[4,"Error"],[4,"ParseError"],[4,"Error"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[3,"TypeId"],[3,"Name2Data"],[3,"Record"],[3,"Header"],[4,"ColumnData"],[3,"Schema"],[8,"Array"],[3,"Arc"],[3,"Global"],[3,"Vec"],[15,"f32"],[15,"i32"],[3,"Record2Chunk"],[4,"Encoding"]]},\
"vcf2parquet_bin":{"doc":"vcf2parquet bin","t":[0,0,5,13,3,4,3,13,13,13,13,13,3,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,6,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,12,12,12],"n":["cli","error","main","Brotli","Command","Compression","Convert","Convert","Gzip","Lz4","Lzo","Snappy","Split","Split","SubCommand","Uncompressed","Zstd","__clone_box","__clone_box","__clone_box","__clone_box","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","batch_size","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","command","command","command","command","command_for_update","command_for_update","command_for_update","command_for_update","compression","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","group_id","has_subcommand","info_optional","input","into","into","into","into","into","output","read_buffer","subcommand","to_owned","to_owned","to_owned","to_owned","to_possible_value","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","value_variants","Error","Io","Lib","Niffler","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","mapping","provide","source","to_string","try_from","try_into","type_id","error","error","error"],"q":["vcf2parquet_bin","","","vcf2parquet_bin::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","vcf2parquet_bin::error","","","","","","","","","","","","","","","","","","","","","vcf2parquet_bin::error::Error","",""],"d":["cli of vcf2parquet-bin","error of vcf2parquet-bin","","","","","Convert a vcf in a parquet","","","","","","Convert a vcf in multiple parquet file each file contains …","","","","","","","","","","","","","","","","","Get batch_size set by user or default value","","","","","","","","","","","","","","","","","","","","","","","","","","","Get compression set by user or default value","","","","","","Get output format","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Get info optional","Get input","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get output","Get read buffer size","Get subcommand","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Io error","vcf2parquet-lib error","Niffler error","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","",""],"i":[0,0,0,6,0,0,0,7,6,6,6,6,0,7,0,6,6,6,7,8,9,4,8,9,4,8,9,7,7,4,6,4,7,8,9,6,4,7,8,9,6,7,8,9,6,7,8,9,4,7,8,9,4,7,8,9,4,6,4,7,8,9,9,6,4,7,8,9,4,7,8,9,4,7,8,9,4,8,9,7,4,4,6,4,7,8,9,8,4,4,6,7,8,9,6,6,4,7,8,9,6,4,7,8,9,6,4,7,8,9,4,7,8,9,4,7,8,9,6,0,23,23,23,0,23,23,23,23,23,23,23,23,23,0,23,23,23,23,23,23,30,31,32],"f":[0,0,[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[2],[2],[2],[2],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[3,3],[4,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[6,6],[7,7],[8,8],[9,9],[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[4,10],[[6,11],12],[[4,11],12],[[7,11],12],[[8,11],12],[[9,11],12],[9,13],[[]],[[]],[[]],[[]],[[]],[14,[[16,[4,15]]]],[14,[[16,[7,15]]]],[14,[[16,[8,15]]]],[14,[[16,[9,15]]]],[14,[[16,[4,15]]]],[14,[[16,[7,15]]]],[14,[[16,[8,15]]]],[14,[[16,[9,15]]]],[[],[[18,[17]]]],[[],[[18,[17]]]],[[],[[18,[17]]]],[13,19],[4,19],[4,20],[[]],[[]],[[]],[[]],[[]],[8,20],[4,5],[4,7],[[]],[[]],[[]],[[]],[6,[[18,[21]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],22],[[],22],[[],22],[[],22],[[],22],[[4,14],[[16,[15]]]],[[7,14],[[16,[15]]]],[[8,14],[[16,[15]]]],[[9,14],[[16,[15]]]],[[4,14],[[16,[15]]]],[[7,14],[[16,[15]]]],[[8,14],[[16,[15]]]],[[9,14],[[16,[15]]]],[[]],0,0,0,0,0,[[]],[[]],[[23,11],12],[[23,11],12],[24,23],[25,23],[26,23],[[]],[[]],[[],23],[27],[23,[[18,[28]]]],[[],29],[[],16],[[],16],[[],22],0,0,0],"p":[[6,"Result"],[3,"Private"],[3,"Command"],[3,"Command"],[15,"usize"],[4,"Compression"],[4,"SubCommand"],[3,"Convert"],[3,"Split"],[4,"CompressionOptions"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"ArgMatches"],[6,"Error"],[4,"Result"],[3,"Id"],[4,"Option"],[15,"bool"],[3,"PathBuf"],[3,"PossibleValue"],[3,"TypeId"],[4,"Error"],[3,"Error"],[4,"Error"],[4,"Error"],[3,"Demand"],[8,"Error"],[3,"String"],[13,"Io"],[13,"Niffler"],[13,"Lib"]]},\
"vcf2parquet_lib":{"doc":"vcf2parquet library","t":[0,0,0,0,5,5,13,4,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,4,13,13,13,13,13,13,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5],"n":["error","name2data","record2chunk","schema","vcf2multiparquet","vcf2parquet","Arrow","Error","Io","NoConversion","NoodlesHeader","Parquet","Result","borrow","borrow_mut","deref","deref_mut","drop","fmt","fmt","from","from","from","from","from","init","into","provide","source","to_string","try_from","try_into","type_id","Bool","ColumnData","Float","Int","ListBool","ListFloat","ListInt","ListString","Name2Data","String","add_record","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","drop","drop","fmt","fmt","from","from","get","get_mut","init","init","into","into","into_arc","into_arc","new","push_bool","push_f32","push_i32","push_null","push_string","push_vecbool","push_vecf32","push_veci32","push_vecstring","try_from","try_from","try_into","try_into","type_id","type_id","Record2Chunk","borrow","borrow_mut","deref","deref_mut","drop","encodings","from","init","into","into_iter","new","next","try_from","try_into","type_id","from_header"],"q":["vcf2parquet_lib","","","","","","vcf2parquet_lib::error","","","","","","","","","","","","","","","","","","","","","","","","","","","vcf2parquet_lib::name2data","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","vcf2parquet_lib::record2chunk","","","","","","","","","","","","","","","","vcf2parquet_lib::schema"],"d":["vcf2parquet error","Struct to link name and data","Convert vcf record iterator into Parquet chunk","Construct parquet schema corresponding to vcf","Read <code>input</code> vcf and write each row group in a parquet file …","Read <code>input</code> vcf and write parquet in <code>output</code>","Arrow error","","Io error","Not support type conversion","Noodles header vcf error","Parquet error","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Alias of std::collections::HashMap that associate a column …","","Add a vcf record in std::collections::HashMap struct","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Just a wrapper arround std::collections::HashMap::get","Just a wrapper arround std::collections::HashMap::get_mut","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert Name2Data in vector of arrow2 array","Convert ColumnData in Arrow2 array","Create a new Name2Data, vcf header is required to add info …","Add a boolean value in array, if it’s not a boolean …","Add a f32 value in array, if it’s not a float array …","Add a i32 value in array, if it’s not a integer array …","Add a Null value in array","Add a string value in array, if it’s not a string array …","Add a vector of bool value in array, if it’s not a …","Add a vector of float value in array, if it’s not a …","Add a vector of integer value in array, if it’s not a …","Add a vector of string value in array, if it’s not a …","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","Generate a parquet schema corresponding to vcf header"],"i":[0,0,0,0,0,0,6,0,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,22,0,22,22,22,22,22,22,0,22,19,19,22,19,22,19,22,19,22,19,22,19,22,19,22,19,19,19,22,19,22,19,22,19,22,22,22,22,22,22,22,22,22,19,22,19,22,19,22,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0],"f":[0,0,0,0,[[1,2,3,4],5],[[2,3,4],5],0,0,0,0,0,0,0,[[]],[[]],[2],[2],[2],[[6,7],8],[[6,7],8],[9,6],[[]],[10,6],[11,6],[12,6],[[],2],[[]],[13],[6,[[15,[14]]]],[[],16],[[],17],[[],17],[[],18],0,0,0,0,0,0,0,0,0,0,[[19,20,21],[[17,[12]]]],[[]],[[]],[[]],[[]],[2],[2],[2],[2],[2],[2],[[19,7],8],[[22,7],8],[[]],[[]],[[19,1],[[15,[22]]]],[[19,1],[[15,[22]]]],[[],2],[[],2],[[]],[[]],[[19,23],[[26,[[25,[24]]]]]],[22,[[25,[24]]]],[[2,21],19],[[22,[15,[4]]]],[[22,[15,[27]]]],[[22,[15,[28]]]],[22],[[22,16]],[[22,[26,[[15,[4]]]]],29],[[22,[26,[[15,[27]]]]],29],[[22,[26,[[15,[28]]]]],29],[[22,[26,[[15,[16]]]]],29],[[],17],[[],17],[[],17],[[],17],[[],18],[[],18],0,[[]],[[]],[2],[2],[2],[30,[[26,[[26,[31]]]]]],[[]],[[],2],[[]],[[]],[[2,21,23],30],[30,15],[[],17],[[],17],[[],18],[[21,4],[[5,[23]]]]],"p":[[15,"str"],[15,"usize"],[4,"CompressionOptions"],[15,"bool"],[6,"Result"],[4,"Error"],[3,"Formatter"],[6,"Result"],[4,"ParseError"],[3,"Error"],[4,"Error"],[4,"Error"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"Name2Data"],[3,"Record"],[3,"Header"],[4,"ColumnData"],[3,"Schema"],[8,"Array"],[3,"Arc"],[3,"Vec"],[15,"f32"],[15,"i32"],[6,"Result"],[3,"Record2Chunk"],[4,"Encoding"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
