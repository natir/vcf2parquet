var searchIndex = new Map(JSON.parse('[\
["pyvcf2parquet",{"doc":"vcf2parquet python binding","t":"PGPPPPPPNNNNNNNNNNNNNNNNNNNNN","n":["Brotli","Compression","Gzip","Lz4","Lzo","Snappy","Uncompressed","Zstd","__clone_box","arguments","borrow","borrow_mut","clone","clone_into","doc","extract","extract","extract","fmt","from","into","into_py","items_iter","lazy_type_object","to_owned","try_from","try_into","type_id","type_object_raw"],"q":[[0,"pyvcf2parquet"],[29,"dyn_clone::sealed"],[30,"pyo3::marker"],[31,"pyo3::types::any"],[32,"pyo3::instance"],[33,"core::ffi::c_str"],[34,"pyo3::err"],[35,"pyo3::err"],[36,"core::fmt"],[37,"core::fmt"],[38,"pyo3::impl_::pyclass::lazy_type_object"],[39,"core::any"],[40,"pyo3_ffi::cpython::object"]],"d":["","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6],"f":[0,0,0,0,0,0,0,0,[[-1,1],2,[]],[[-1,3],[[5,[4]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,6],[[-1,-2],2,[],[]],[3,[[8,[7]]]],[4,[[10,[-1,9]]],[]],[[4,-1],[[8,[6]]],[]],[[4,-1],[[8,[6]]],[]],[[6,11],12],[-1,-1,[]],[-1,-2,[],[]],[[6,3],13],[[],14],[[],[[15,[6]]]],[-1,-2,[],[]],[-1,[[10,[-2]]],[],[]],[-1,[[10,[-2]]],[],[]],[-1,16,[]],[3,17]],"c":[],"p":[[5,"Private",29],[1,"tuple"],[5,"Python",30],[5,"PyAny",31],[5,"Py",32],[6,"Compression",0],[5,"CStr",33],[8,"PyResult",34],[5,"PyErr",34],[6,"Result",35],[5,"Formatter",36],[8,"Result",36],[8,"PyObject",32],[5,"PyClassItemsIter",37],[5,"LazyTypeObject",38],[5,"TypeId",39],[5,"PyTypeObject",40]],"b":[[16,"impl-PyFunctionArgument%3C\'a,+\'py%3E-for-%26Compression"],[17,"impl-PyFunctionArgument%3C\'a,+\'py%3E-for-%26mut+Compression"]]}],\
["vcf2parquet",{"doc":"vcf2parquet allow user to convert a vcf in parquet format.","t":"CCCCHHPPGPPPPPINNNNNNNNNNNNNNNPGPPPPPPFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNH","n":["error","name2data","record2chunk","schema","vcf2multiparquet","vcf2parquet","Arrow","Err","Error","Io","NoConversion","NoodlesHeader","Ok","Parquet","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","into","source","to_string","try_from","try_into","type_id","Bool","ColumnData","Float","Int","ListBool","ListFloat","ListInt","ListString","Name2Data","String","add_record","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","get","get_mut","into","into","into_arc","into_arc","is_empty","len","new","new","push_bool","push_f32","push_i32","push_null","push_string","push_vecbool","push_vecf32","push_veci32","push_vecstring","try_from","try_from","try_into","try_into","type_id","type_id","Record2Chunk","borrow","borrow_mut","encodings","from","into","into_iter","new","next","try_from","try_into","type_id","from_header"],"q":[[0,"vcf2parquet"],[6,"vcf2parquet::error"],[30,"vcf2parquet::name2data"],[74,"vcf2parquet::record2chunk"],[86,"vcf2parquet::schema"],[87,"parquet2::parquet_bridge"],[88,"core::result"],[89,"std::io"],[90,"std::io"],[91,"core::fmt"],[92,"noodles_vcf::header::parser"],[93,"arrow2::error"],[94,"parquet2::error"],[95,"core::error"],[96,"core::option"],[97,"alloc::string"],[98,"core::any"],[99,"noodles_vcf::record"],[100,"noodles_vcf::header"],[101,"arrow2::datatypes::schema"],[102,"arrow2::array"],[103,"alloc::sync"],[104,"alloc::vec"],[105,"arrow2::datatypes"],[106,"parquet2::parquet_bridge"]],"d":["vcf2parquet error","Struct to link name and data","Convert vcf record iterator into Parquet chunk","Construct parquet schema corresponding to vcf","Read <code>input</code> vcf and write each row group in a parquet file …","Read <code>input</code> vcf and write parquet in <code>output</code>","Arrow error","Contains the error value","","Io error","Not support type conversion","Noodles header vcf error","Contains the success value","Parquet error","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Alias of std::collections::HashMap that associate a column …","","Add a vcf record in std::collections::HashMap struct","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Just a wrapper arround std::collections::HashMap::get","Just a wrapper arround std::collections::HashMap::get_mut","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert Name2Data in vector of arrow2 array","Convert ColumnData in Arrow2 array","","","Create a new Name2Data, vcf header is required to add info …","","Add a boolean value in array, if it’s not a boolean …","Add a f32 value in array, if it’s not a float array …","Add a i32 value in array, if it’s not a integer array …","Add a Null value in array","Add a string value in array, if it’s not a string array …","Add a vector of bool value in array, if it’s not a …","Add a vector of float value in array, if it’s not a …","Add a vector of integer value in array, if it’s not a …","Add a vector of string value in array, if it’s not a …","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Generate a parquet schema corresponding to vcf header"],"i":[0,0,0,0,0,0,6,35,0,6,6,6,35,6,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,24,0,24,24,24,24,24,24,0,24,20,20,24,20,24,20,24,20,24,20,20,20,24,20,24,24,24,20,24,24,24,24,24,24,24,24,24,24,20,24,20,24,20,24,0,31,31,31,31,31,31,31,31,31,31,31,0],"f":[0,0,0,0,[[-1,1,2,3,4],[[7,[5,6]]],8],[[-1,-2,2,3,4],[[7,[5,6]]],8,9],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[6,10],[[7,[5,11]]]],[[6,10],[[7,[5,11]]]],[12,6],[13,6],[14,6],[15,6],[-1,-1,[]],[-1,-2,[],[]],[6,[[17,[16]]]],[-1,18,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,19,[]],0,0,0,0,0,0,0,0,0,0,[[20,21,22,23],[[7,[5,14]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[20,10],[[7,[5,11]]]],[[24,10],[[7,[5,11]]]],[-1,-1,[]],[-1,-1,[]],[[20,1],[[17,[24]]]],[[20,1],[[17,[24]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[20,23],[[27,[[26,[25]]]]]],[24,[[26,[25]]]],[24,4],[24,2],[[2,23],20],[[28,2],24],[[24,[17,[4]]],5],[[24,[17,[29]]],5],[[24,[17,[30]]],5],[24,5],[[24,18],5],[[24,[27,[[17,[4]]]]],[[7,[5,14]]]],[[24,[27,[[17,[29]]]]],[[7,[5,14]]]],[[24,[27,[[17,[30]]]]],[[7,[5,14]]]],[[24,[27,[[17,[18]]]]],[[7,[5,14]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,19,[]],[-1,19,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[31,[-1]]],[[27,[[27,[32]]]]],[[34,[],[[33,[[7,[21,12]]]]]]]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,2,22,23],[[31,[-1]]],[[34,[],[[33,[[7,[21,12]]]]]]]],[[[31,[-1]]],17,[[34,[],[[33,[[7,[21,12]]]]]]]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,19,[]],[[22,4],[[7,[23,6]]]]],"c":[],"p":[[1,"str"],[1,"usize"],[6,"CompressionOptions",87],[1,"bool"],[1,"tuple"],[6,"Error",6],[6,"Result",88],[10,"BufRead",89],[10,"Write",89],[5,"Formatter",90],[5,"Error",90],[5,"Error",91],[6,"ParseError",92],[6,"Error",93],[6,"Error",94],[10,"Error",95],[6,"Option",96],[5,"String",97],[5,"TypeId",98],[5,"Name2Data",30],[5,"Record",99],[5,"Header",100],[5,"Schema",101],[6,"ColumnData",30],[10,"Array",102],[5,"Arc",103],[5,"Vec",104],[6,"DataType",105],[1,"f32"],[1,"i32"],[5,"Record2Chunk",74],[6,"Encoding",87],[17,"Item"],[10,"Iterator",106],[8,"Result",6]],"b":[[17,"impl-Debug-for-Error"],[18,"impl-Display-for-Error"],[19,"impl-From%3CError%3E-for-Error"],[20,"impl-From%3CParseError%3E-for-Error"],[21,"impl-From%3CError%3E-for-Error"],[22,"impl-From%3CError%3E-for-Error"]]}],\
["vcf2parquet_bin",{"doc":"vcf2parquet bin","t":"CCHPFGFPPPPPFPGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPGPPPPINNNNNNNNNHNNNNNOOO","n":["cli","error","main","Brotli","Command","Compression","Convert","Convert","Gzip","Lz4","Lzo","Snappy","Split","Split","SubCommand","Uncompressed","Zstd","__clone_box","__clone_box","__clone_box","__clone_box","augment_args","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands_for_update","batch_size","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","command","command","command","command","command_for_update","command_for_update","command_for_update","command_for_update","compression","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","group_id","has_subcommand","info_optional","input","into","into","into","into","into","output","read_buffer","subcommand","to_owned","to_owned","to_owned","to_owned","to_possible_value","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","value_variants","Err","Error","Io","Lib","Niffler","Ok","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","mapping","source","to_string","try_from","try_into","type_id","error","error","error"],"q":[[0,"vcf2parquet_bin"],[3,"vcf2parquet_bin::cli"],[119,"vcf2parquet_bin::error"],[141,"vcf2parquet_bin::error::Error"],[144,"dyn_clone::sealed"],[145,"clap_builder::builder::command"],[146,"parquet2::parquet_bridge"],[147,"core::fmt"],[148,"core::fmt"],[149,"clap_builder"],[150,"core::result"],[151,"clap_builder::util::id"],[152,"core::option"],[153,"std::path"],[154,"clap_builder::builder::possible_value"],[155,"core::any"],[156,"niffler::error"],[157,"std::io::error"],[158,"vcf2parquet_lib::error"],[159,"core::convert"],[160,"core::error"],[161,"alloc::string"]],"d":["cli of vcf2parquet-bin","error of vcf2parquet-bin","","","","","Convert a vcf in a parquet","","","","","","Convert a vcf in multiple parquet file each file contains …","","","","","","","","","","","","","","","","","Get batch_size set by user or default value","","","","","","","","","","","","","","","","","","","","","","","","","","","Get compression set by user or default value","","","","","","Get output format","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Get info optional","Get input","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get output","Get read buffer size","Get subcommand","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Contains the error value","","Io error","vcf2parquet-lib error","Niffler error","Contains the success value","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,7,0,0,0,8,7,7,7,7,0,8,0,7,7,7,8,9,10,5,9,10,5,9,10,8,8,5,7,5,8,9,10,7,5,8,9,10,7,8,9,10,7,8,9,10,5,8,9,10,5,8,9,10,5,7,5,8,9,10,10,7,5,8,9,10,5,8,9,10,5,8,9,10,5,9,10,8,5,5,7,5,8,9,10,9,5,5,7,8,9,10,7,7,5,8,9,10,7,5,8,9,10,7,5,8,9,10,5,8,9,10,5,8,9,10,7,2,0,25,25,25,2,0,25,25,25,25,25,25,25,25,25,0,25,25,25,25,25,32,33,34],"f":[0,0,[[],[[2,[1]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[[-1,3],1,[]],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[4,4],[5,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,7],[8,8],[9,9],[10,10],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[-1,-2],1,[],[]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[[],4],[5,11],[[7,12],13],[[5,12],13],[[8,12],13],[[9,12],13],[[10,12],13],[10,14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[15,[[17,[5,16]]]],[15,[[17,[8,16]]]],[15,[[17,[9,16]]]],[15,[[17,[10,16]]]],[15,[[17,[5,16]]]],[15,[[17,[8,16]]]],[15,[[17,[9,16]]]],[15,[[17,[10,16]]]],[[],[[19,[18]]]],[[],[[19,[18]]]],[[],[[19,[18]]]],[14,20],[5,20],[5,21],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,21],[5,6],[5,8],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,[[19,[22]]]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[-1,23,[]],[[5,15],[[17,[1,16]]]],[[8,15],[[17,[1,16]]]],[[9,15],[[17,[1,16]]]],[[10,15],[[17,[1,16]]]],[[5,15],[[17,[1,16]]]],[[8,15],[[17,[1,16]]]],[[9,15],[[17,[1,16]]]],[[10,15],[[17,[1,16]]]],[[],[[24,[7]]]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[25,12],13],[[25,12],13],[26,25],[27,25],[28,25],[-1,-1,[]],[-1,-2,[],[]],[-1,25,[[29,[25]]]],[25,[[19,[30]]]],[-1,31,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,23,[]],0,0,0],"c":[],"p":[[1,"tuple"],[8,"Result",119],[5,"Private",144],[5,"Command",145],[5,"Command",3],[1,"usize"],[6,"Compression",3],[6,"SubCommand",3],[5,"Convert",3],[5,"Split",3],[6,"CompressionOptions",146],[5,"Formatter",147],[8,"Result",147],[1,"str"],[5,"ArgMatches",148],[8,"Error",149],[6,"Result",150],[5,"Id",151],[6,"Option",152],[1,"bool"],[5,"PathBuf",153],[5,"PossibleValue",154],[5,"TypeId",155],[1,"slice"],[6,"Error",119],[6,"Error",156],[5,"Error",157],[6,"Error",158],[10,"Into",159],[10,"Error",160],[5,"String",161],[15,"Io",141],[15,"Niffler",141],[15,"Lib",141]],"b":[[128,"impl-Debug-for-Error"],[129,"impl-Display-for-Error"],[130,"impl-From%3CError%3E-for-Error"],[131,"impl-From%3CError%3E-for-Error"],[132,"impl-From%3CError%3E-for-Error"]]}],\
["vcf2parquet_lib",{"doc":"vcf2parquet library","t":"CCCCHHPPGPPPPPINNNNNNNNNNNNNNNPGPPPPPPFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNFNNNNNNNNNNNH","n":["error","name2data","record2chunk","schema","vcf2multiparquet","vcf2parquet","Arrow","Err","Error","Io","NoConversion","NoodlesHeader","Ok","Parquet","Result","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","into","source","to_string","try_from","try_into","type_id","Bool","ColumnData","Float","Int","ListBool","ListFloat","ListInt","ListString","Name2Data","String","add_record","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","get","get_mut","into","into","into_arc","into_arc","is_empty","len","new","new","push_bool","push_f32","push_i32","push_null","push_string","push_vecbool","push_vecf32","push_veci32","push_vecstring","try_from","try_from","try_into","try_into","type_id","type_id","Record2Chunk","borrow","borrow_mut","encodings","from","into","into_iter","new","next","try_from","try_into","type_id","from_header"],"q":[[0,"vcf2parquet_lib"],[6,"vcf2parquet_lib::error"],[30,"vcf2parquet_lib::name2data"],[74,"vcf2parquet_lib::record2chunk"],[86,"vcf2parquet_lib::schema"],[87,"parquet2::parquet_bridge"],[88,"std::io"],[89,"std::io"],[90,"core::fmt"],[91,"parquet2::error"],[92,"std::io::error"],[93,"arrow2::error"],[94,"core::error"],[95,"core::option"],[96,"alloc::string"],[97,"core::result"],[98,"core::any"],[99,"noodles_vcf::record"],[100,"noodles_vcf::header"],[101,"arrow2::datatypes::schema"],[102,"arrow2::array"],[103,"alloc::sync"],[104,"alloc::vec"],[105,"arrow2::datatypes"],[106,"arrow2::error"]],"d":["vcf2parquet error","Struct to link name and data","Convert vcf record iterator into Parquet chunk","Construct parquet schema corresponding to vcf","Read <code>input</code> vcf and write each row group in a parquet file …","Read <code>input</code> vcf and write parquet in <code>output</code>","Arrow error","Contains the error value","","Io error","Not support type conversion","Noodles header vcf error","Contains the success value","Parquet error","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Alias of std::collections::HashMap that associate a column …","","Add a vcf record in std::collections::HashMap struct","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Just a wrapper arround std::collections::HashMap::get","Just a wrapper arround std::collections::HashMap::get_mut","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert Name2Data in vector of arrow2 array","Convert ColumnData in Arrow2 array","","","Create a new Name2Data, vcf header is required to add info …","","Add a boolean value in array, if it’s not a boolean …","Add a f32 value in array, if it’s not a float array …","Add a i32 value in array, if it’s not a integer array …","Add a Null value in array","Add a string value in array, if it’s not a string array …","Add a vector of bool value in array, if it’s not a …","Add a vector of float value in array, if it’s not a …","Add a vector of integer value in array, if it’s not a …","Add a vector of string value in array, if it’s not a …","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Generate a parquet schema corresponding to vcf header"],"i":[0,0,0,0,0,0,9,6,0,9,9,9,6,9,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,25,0,25,25,25,25,25,25,0,25,21,21,25,21,25,21,25,21,25,21,21,21,25,21,25,25,25,21,25,25,25,25,25,25,25,25,25,25,21,25,21,25,21,25,0,33,33,33,33,33,33,33,33,33,33,33,0],"f":[0,0,0,0,[[-1,1,2,3,4],[[6,[5]]],7],[[-1,-2,2,3,4],[[6,[5]]],7,8],0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[9,10],11],[[9,10],11],[12,9],[13,9],[14,9],[15,9],[-1,-1,[]],[-1,-2,[],[]],[9,[[17,[16]]]],[-1,18,[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],0,0,0,0,0,0,0,0,0,0,[[21,22,23,24],[[19,[5,15]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[21,10],11],[[25,10],11],[-1,-1,[]],[-1,-1,[]],[[21,1],[[17,[25]]]],[[21,1],[[17,[25]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[21,24],[[28,[[27,[26]]]]]],[25,[[27,[26]]]],[25,4],[25,2],[[2,24],21],[[29,2],25],[[25,[17,[4]]],5],[[25,[17,[30]]],5],[[25,[17,[31]]],5],[25,5],[[25,18],5],[[25,[28,[[17,[4]]]]],[[32,[5]]]],[[25,[28,[[17,[30]]]]],[[32,[5]]]],[[25,[28,[[17,[31]]]]],[[32,[5]]]],[[25,[28,[[17,[18]]]]],[[32,[5]]]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,20,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[33,[-1]]],[[28,[[28,[34]]]]],[[37,[],[[35,[[36,[22]]]]]]]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[-1,2,23,24],[[33,[-1]]],[[37,[],[[35,[[36,[22]]]]]]]],[[[33,[-1]]],[[17,[-2]]],[[37,[],[[35,[[36,[22]]]]]]],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[[23,4],[[6,[24]]]]],"c":[],"p":[[1,"str"],[1,"usize"],[6,"CompressionOptions",87],[1,"bool"],[1,"tuple"],[8,"Result",6],[10,"BufRead",88],[10,"Write",88],[6,"Error",6],[5,"Formatter",89],[8,"Result",89],[6,"ParseError",90],[6,"Error",91],[5,"Error",92],[6,"Error",93],[10,"Error",94],[6,"Option",95],[5,"String",96],[6,"Result",97],[5,"TypeId",98],[5,"Name2Data",30],[5,"Record",99],[5,"Header",100],[5,"Schema",101],[6,"ColumnData",30],[10,"Array",102],[5,"Arc",103],[5,"Vec",104],[6,"DataType",105],[1,"f32"],[1,"i32"],[8,"Result",93],[5,"Record2Chunk",74],[6,"Encoding",87],[17,"Item"],[8,"Result",92],[10,"Iterator",106]],"b":[[17,"impl-Display-for-Error"],[18,"impl-Debug-for-Error"],[19,"impl-From%3CParseError%3E-for-Error"],[20,"impl-From%3CParquetError%3E-for-Error"],[21,"impl-From%3CError%3E-for-Error"],[22,"impl-From%3CError%3E-for-Error"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
